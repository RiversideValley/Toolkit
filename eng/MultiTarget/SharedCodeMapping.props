<Project>
	<PropertyGroup>
		<!-- Define the base path for shared projects -->
		<SharedProjectsBasePath>$(SharedDirectory)</SharedProjectsBasePath>

		<!-- Get the project name without the NETCore, WinUI, or Uwp keyword -->
		<BaseProjectName Condition="$(MSBuildProjectName.Contains('NETCore'))">$(MSBuildProjectName.Replace('.NETCore', ''))</BaseProjectName>
		<BaseProjectName Condition="$(MSBuildProjectName.Contains('WinUI'))">$(MSBuildProjectName.Replace('.WinUI', ''))</BaseProjectName>
		<BaseProjectName Condition="$(MSBuildProjectName.Contains('Uwp'))">$(MSBuildProjectName.Replace('.Uwp', ''))</BaseProjectName>
		<BaseProjectName Condition="$(MSBuildProjectName.Contains('Wpf'))">$(MSBuildProjectName.Replace('.Wpf', ''))</BaseProjectName>
		<BaseProjectName Condition="$(MSBuildProjectName.Contains('Uno'))">$(MSBuildProjectName.Replace('.Uno', ''))</BaseProjectName>
		<RootNamespace>$(BaseProjectName)</RootNamespace>
	</PropertyGroup>

	<!-- Conditionally include shared project references based on the base project name -->
	<Import Project="$(MSBuildThisFileDirectory)\..\..\src\core\$(BaseProjectName)\$(BaseProjectName).projitems" Label="Shared" Condition="Exists('$(MSBuildThisFileDirectory)\..\..\src\core\$(BaseProjectName)\$(BaseProjectName).projitems')" />
	<Import Project="$(MSBuildThisFileDirectory)\..\..\src\core\Riverside.Extensions.WinUI\Riverside.Extensions.WinUI.projitems" Label="Shared" Condition="'$(MSBuildProjectName)' == 'Riverside.Extensions.$(ProjectTarget)'" />
</Project>
